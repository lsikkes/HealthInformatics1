using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using Visualizer;


namespace Visualizer
{
    public class Client
    {
        static UdpClient udp;
        static IPEndPoint udp_ep;
        private Logger logger = Logger.GetInstance();

        /// <summary>
        /// Initializes a new instance of the <see cref="Client"/> class.
        /// </summary>
        /// <param name="p">The port to be used. Should be above standard ports ( > 1023)</param>
        /// <autogeneratedoc />
        public Client()
        {
            int port = 25000;

            try
            {
                while (udp == null)
                {
                    //Initialize UdpClient
                    udp = new UdpClient(port);
                }
                logger.Info("UDP Client Initialized");
                while (true)
                {
                    udp.BeginReceive(new AsyncCallback(UDP_IncomingData), udp_ep);
                }
            }
            catch (SocketException e)
            {
                logger.Error(e.StackTrace.ToString());
            }

            //udp.Close();          //causes ObjectDisposedException
            logger.Info("UDP Client Closed");
        }


        /// <summary>
        /// Waits for incoming data and sends it to the handler.
        /// </summary>
        /// <param name="ar">The ar.</param>
        /// <autogeneratedoc />
        private void UDP_IncomingData(IAsyncResult ar)
        {
            int port = 25000;
            //Create endpoint
            udp_ep = new IPEndPoint(IPAddress.Any, port);

            Console.Write("Waiting for incoming data...");
            //Get the data from the response
            try
            {
                byte[] bResp = udp.EndReceive(ar, ref udp_ep);
                string sResponse = Encoding.ASCII.GetString(bResp);
                //logger.Info("Received packet:" + sResponse);
                Console.WriteLine("Packet#: Received String: " + sResponse);
            }
            catch (Exception e)
            {
                logger.Info(e.ToString());
            }
        }
    }
}

